{"version":3,"sources":["globalStyle.tsx","Theme.tsx","components/TextInput/TextInput.tsx","components/TextInput/index.tsx","components/ErrorMessage/ErrorMessage.tsx","components/ErrorMessage/index.tsx","components/Button/Button.tsx","components/Button/index.tsx","components/FullLoading/FullLoading.tsx","components/FullLoading/index.tsx","api.ts","pages/Login.tsx","pages/SignUp.tsx","App.tsx","index.tsx"],"names":["GlobalStyle","createGlobalStyle","theme","colors","background","primary","accent","lightAccent","error","black","Theme","children","Wrapper","styled","div","Input","Field","props","Label","h4","TextInput","name","label","obscure","data-testid","type","Container","ErrorMessage","StyledButton","button","marginTop","Button","onClick","Overlay","StyledLoading","ReactLoading","FullLoading","show","token","Cookies","get","server","axios","create","baseURL","process","headers","Authorization","ApiErrorMessage","h3","AccountCreatedMessage","LinkButton","Link","Login","useState","loggedIn","setLoggedIn","to","initialValues","Email","Password","validationSchema","Yup","required","email","onSubmit","values","a","setStatus","post","password","then","response","data","defaults","common","set","catch","message","formik","isSubmitting","status","location","state","accountCreated","SignUp","success","setSuccess","pathname","Name","ConfirmPassword","oneOf","App","cookies","isTokenSet","path","component","window","reload","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.05d730f8.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    box-sizing: border-box;\n  }\n\n  html, body {\n    min-height: 100%;\n    width: 100%;\n    margin: 0;\n    overflow: auto;\n  }\n\n  body {\n    font-family: Roboto;\n    font-size: calc(1em + 1vw);\n    color: #fff;\n  }\n\n  button {\n    font-family: Roboto;\n    font-size: inherit;\n    color: #032B43;\n  }\n\n  input, textarea {\n    font-family: Roboto;\n    font-size: inherit;\n    color: #032B43;\n  }\n`;\n\nexport default GlobalStyle;\n","import React from 'react';\nimport { ThemeProvider } from 'styled-components';\n\nconst theme = {\n  colors: {\n    background: '#032B43',\n    primary: '#276FBF',\n    accent: '#2EC4B6',\n    lightAccent: '#eafaf9',\n    error: '#FF3366',\n    black: '#02020A',\n  },\n};\n\ninterface Props {\n  children: React.ReactNode;\n}\n\nconst Theme = ({ children }: Props) => (\n  <ThemeProvider theme={theme}>{children}</ThemeProvider>\n);\n\nexport default Theme;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Field } from 'formik';\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n`;\n\nconst Input = styled(Field)`\n  background-color: ${(props) => props.theme.colors.lightAccent};\n  padding: 20px;\n  text-align: center;\n  transition: border-color 250ms ease;\n  border: 2px solid;\n  border-radius: 50px;\n\n  &:focus {\n    outline: none;\n    border-color: ${(props) => props.theme.colors.accent};\n  }\n`;\n\nconst Label = styled.h4`\n  text-align: left;\n  margin-bottom: 1px;\n  margin-left: 1vw;\n`;\n\ninterface Props {\n  name: string;\n  label?: string;\n  obscure?: boolean;\n}\n\nconst TextInput = ({ name, label, obscure = false }: Props) => {\n  return (\n    <Wrapper>\n      <Label>{label || name}</Label>\n      <Input\n        name={name}\n        data-testid=\"TextInput\"\n        type={obscure ? 'password' : 'text'}\n      />\n    </Wrapper>\n  );\n};\n\nexport default TextInput;\n","import TextInput from './TextInput';\nexport default TextInput;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { ErrorMessage as FormikErrorMessage, ErrorMessageProps } from 'formik';\n\nconst Container = styled.div`\n  color: ${(props) => props.theme.colors.error};\n`;\n\nconst ErrorMessage = (props: ErrorMessageProps) => (\n  <Container>\n    <FormikErrorMessage {...props} />\n  </Container>\n);\nexport default ErrorMessage;\n","import ErrorMessage from './ErrorMessage';\nexport default ErrorMessage;\n","import React from 'react';\nimport styled from 'styled-components';\n\ninterface StyledProps {\n  marginTop?: string;\n}\n\nconst StyledButton = styled.button`\n  background-color: ${(props) => props.theme.colors.accent};\n  border: none;\n  border-radius: 50px;\n  padding: 10px 20px;\n  transition: opacity 250ms ease;\n  margin-top: ${(props: StyledProps) => props.marginTop || '0px'};\n  flex: 1;\n\n  &:focus {\n    outline: none;\n  }\n\n  &:hover {\n    opacity: 0.8;\n  }\n`;\n\ninterface Props {\n  onClick?: (event: React.MouseEvent) => void;\n  type?: 'button' | 'submit' | 'reset' | undefined;\n  children: React.ReactNode;\n}\n\nconst Button = ({\n  onClick,\n  type,\n  children,\n  marginTop,\n}: Props & StyledProps) => {\n  return (\n    <StyledButton type={type} onClick={onClick} marginTop={marginTop}>\n      {children}\n    </StyledButton>\n  );\n};\n\nexport default Button;\n","import Button from './Button';\nexport default Button;\n","import React from 'react';\nimport styled from 'styled-components';\nimport ReactLoading from 'react-loading';\n\nconst Overlay = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-content: center;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.4);\n  z-index: 2;\n`;\n\nconst StyledLoading = styled(ReactLoading)`\n  display: block;\n  margin: auto;\n  text-align: center;\n  width: 10vw;\n  height: 10vh;\n`;\n\nconst FullLoading = ({ show = false }: { show: boolean }) =>\n  show ? (\n    <Overlay>\n      <StyledLoading data-testid=\"FullLoading\" type=\"bubbles\" />\n    </Overlay>\n  ) : (\n    <></>\n  );\n\nexport default FullLoading;\n","import FullLoading from './FullLoading';\nexport default FullLoading;\n","import axios from 'axios';\nimport Cookies from 'universal-cookie';\n\nconst token = new Cookies().get('token');\nconst server = axios.create({\n  baseURL: process.env.REACT_APP_API,\n  headers: {\n    Authorization: token ? `Bearer ${token}` : '',\n  },\n});\n\nexport default server;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport { Redirect, Link } from 'react-router-dom';\nimport Cookies from 'universal-cookie';\n\nimport TextInput from '../components/TextInput';\nimport ErrorMessage from '../components/ErrorMessage';\nimport Button from '../components/Button';\nimport FullLoading from '../components/FullLoading';\nimport server from '../api';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst ApiErrorMessage = styled.h3`\n  color: ${(props) => props.theme.colors.error};\n  text-align: center;\n`;\n\nconst AccountCreatedMessage = styled.h3`\n  text-align: center;\n`;\n\nconst LinkButton = styled(Link)`\n  display: flex;\n  text-decoration: none;\n`;\n\ninterface Props {\n  location?: {\n    state: {\n      accountCreated: boolean;\n    };\n  };\n}\n\nconst Login = (props: Props) => {\n  const [loggedIn, setLoggedIn] = useState(false);\n\n  return loggedIn ? (\n    <Redirect to=\"/dashboard\" />\n  ) : (\n    <Formik\n      initialValues={{ Email: '', Password: '' }}\n      validationSchema={Yup.object({\n        Email: Yup.string().required().email(),\n        Password: Yup.string().required(),\n      })}\n      onSubmit={async (values, { setStatus }) => {\n        server\n          .post('/login', {\n            email: values.Email,\n            password: values.Password,\n          })\n          .then((response) => {\n            const token = response.data.data.token;\n            server.defaults.headers.common = {\n              Authorization: `Bearer ${token}`,\n            };\n            new Cookies().set('token', token);\n            setLoggedIn(true);\n          })\n          .catch((error) => {\n            if (error.response) {\n              setStatus(error.response.data.message);\n            }\n          });\n      }}\n    >\n      {(formik) => (\n        <Form>\n          <FullLoading show={formik.isSubmitting} />\n          <Container>\n            {formik.status && (\n              <ApiErrorMessage>{formik.status}</ApiErrorMessage>\n            )}\n            {props.location &&\n              props.location.state &&\n              props.location.state.accountCreated && (\n                <AccountCreatedMessage>\n                  Account successfully created!\n                </AccountCreatedMessage>\n              )}\n            <TextInput name=\"Email\" />\n            <ErrorMessage name=\"Email\" />\n            <TextInput name=\"Password\" obscure />\n            <ErrorMessage name=\"Password\" />\n\n            <Button type=\"submit\" marginTop=\"20px\">\n              Login\n            </Button>\n            <LinkButton to=\"/signup\">\n              <Button marginTop=\"10px\"> Create a new account </Button>\n            </LinkButton>\n          </Container>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default Login;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport { Redirect } from 'react-router-dom';\n\nimport TextInput from '../components/TextInput';\nimport ErrorMessage from '../components/ErrorMessage';\nimport Button from '../components/Button';\nimport FullLoading from '../components/FullLoading';\nimport server from '../api';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst ApiErrorMessage = styled.h3`\n  color: ${(props) => props.theme.colors.error};\n  text-align: center;\n`;\n\nconst SignUp = () => {\n  const [success, setSuccess] = useState(false);\n\n  return success ? (\n    <Redirect to={{ pathname: '/login', state: { accountCreated: true } }} />\n  ) : (\n    <Formik\n      initialValues={{\n        Name: '',\n        Email: '',\n        Password: '',\n        ConfirmPassword: '',\n      }}\n      validationSchema={Yup.object({\n        Name: Yup.string().required(),\n        Email: Yup.string().required().email(),\n        Password: Yup.string().required(),\n        ConfirmPassword: Yup.string().oneOf(\n          [Yup.ref('Password'), null],\n          \"Passwords don't match\",\n        ),\n      })}\n      onSubmit={async (values, { setStatus }) => {\n        server\n          .post('/user', {\n            name: values.Name,\n            email: values.Email,\n            password: values.Password,\n          })\n          .then((response) => {\n            if (response.status === 201) setSuccess(true);\n          })\n          .catch((error) => {\n            if (error.response) {\n              setStatus(error.response.data.message);\n            }\n          });\n      }}\n    >\n      {(formik) => (\n        <Form>\n          <FullLoading show={formik.isSubmitting} />\n          <Container>\n            {formik.status && (\n              <ApiErrorMessage>{formik.status}</ApiErrorMessage>\n            )}\n            <TextInput name=\"Name\" />\n            <ErrorMessage name=\"Name\" />\n            <TextInput name=\"Email\" />\n            <ErrorMessage name=\"Email\" />\n            <TextInput name=\"Password\" obscure />\n            <ErrorMessage name=\"Password\" />\n            <TextInput\n              name=\"ConfirmPassword\"\n              label=\"Confirm Password\"\n              obscure\n            />\n            <ErrorMessage name=\"ConfirmPassword\" />\n\n            <Button type=\"submit\" marginTop=\"60px\">\n              Sign Up\n            </Button>\n          </Container>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default SignUp;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Cookies from 'universal-cookie';\nimport { Switch, Route, Redirect } from 'react-router-dom';\n\nimport GlobalStyle from './globalStyle';\nimport Theme from './Theme';\nimport Login from './pages/Login';\nimport SignUp from './pages/SignUp';\nimport Button from './components/Button';\n\nconst Container = styled.div`\n  background-color: ${(props) => props.theme.colors.background};\n  padding: 40px;\n  display: flex;\n  flex-direction: column;\n  align-content: center;\n  align-items: center;\n  justify-content: center;\n  width: 100vw;\n  min-height: 100vh;\n`;\n\nconst App = () => {\n  const cookies = new Cookies();\n  const isTokenSet = cookies.get('token');\n  return (\n    <>\n      {isTokenSet ? <Redirect to=\"/dashboard\" /> : <Redirect to=\"/login\" />}\n      <GlobalStyle />\n      <Theme>\n        <Container>\n          <Switch>\n            <Route path=\"/signup\" component={SignUp} />\n            <Route path=\"/login\" component={Login} />\n            <Route path=\"/dashboard\">\n              <div>\n                <Button\n                  onClick={() => {\n                    cookies.set('token', '');\n                    window.location.reload();\n                  }}\n                >\n                  Logoff\n                </Button>\n              </div>\n            </Route>\n          </Switch>\n        </Container>\n      </Theme>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'dotenv/config';\nimport { HashRouter } from 'react-router-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}